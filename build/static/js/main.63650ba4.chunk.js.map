{"version":3,"sources":["index.js"],"names":["winLine","Square","props","className","win","onClick","value","Board","i","this","winBlocks","includes","key","squares","ary","items","map","_value","index","_val","ind","renderSquare","React","Component","Game","state","history","Array","fill","chosenIndex","stepNumber","xIsNext","reverseList","winBlockId","slice","length","calculateWinner","setState","concat","console","log","step","moves","current","winner","status","move","row","Math","floor","col","buttonJ","jumpTo","movesReverse","val","idx","handleClick","reverse","lines","a","b","c","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.63650ba4.chunk.js","sourcesContent":["import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\n  let winLine = [];\r\n  function Square(props) {\r\n    return (\r\n      <button className={props.win} onClick={props.onClick}>\r\n        {props.value}\r\n      </button>\r\n    )\r\n  }\r\n  \r\n  class Board extends React.Component {\r\n    renderSquare(i) {\r\n      if(this.props.winBlocks.includes(i)) { \r\n        return (\r\n          <Square \r\n            win='winSquare'  \r\n            key={i} \r\n            value={this.props.squares[i]} \r\n            onClick={() => this.props.onClick(i)}\r\n          />\r\n        );\r\n      } else {\r\n        return (\r\n          <Square \r\n            win='square' \r\n            key={i} \r\n            value={this.props.squares[i]} \r\n            onClick={() => this.props.onClick(i)} \r\n          />\r\n        );\r\n      }\r\n    }\r\n    render() {\r\n      const ary = [[0,0,0], [0,0,0], [0,0,0]];\r\n      const items = ary.map( (_value, index)=>\r\n        <div key={index} className='board-row'>\r\n          {ary[index].map( (_val, ind) => \r\n            this.renderSquare(3 * index + ind) )}\r\n        </div> );\r\n\r\n      return (\r\n        <div>\r\n          {items}\r\n        </div>\r\n      );\r\n    }\r\n  }\r\n  \r\n  class Game extends React.Component {\r\n    constructor(props) {\r\n      super(props);\r\n      this.state = {\r\n        history: [{\r\n          squares: Array(9).fill(null),\r\n          chosenIndex: null, \r\n        }], \r\n        stepNumber: 0, \r\n        xIsNext: false, \r\n        reverseList: false, \r\n        winBlockId: [null, null, null], \r\n      }\r\n    }\r\n\r\n    handleClick(i) {\r\n      const history = this.state.history.slice(0, this.state.stepNumber + 1);\r\n      const current = history[history.length - 1];\r\n      const squares = current.squares.slice();\r\n      const chosenIndex = i;\r\n      if(calculateWinner(squares) || squares[i]) {\r\n        return;\r\n      }\r\n      squares[i] = this.state.xIsNext ? 'X' : 'O';\r\n      this.setState({\r\n        history: history.concat([{\r\n          squares: squares, \r\n          chosenIndex: chosenIndex, \r\n        }]), \r\n        stepNumber: history.length,  \r\n        xIsNext: !this.state.xIsNext,\r\n      });\r\n\r\n      if(calculateWinner(squares)) {\r\n        this.setState({\r\n          winBlockId: winLine.slice(),\r\n        });\r\n        console.log(this.state.winBlockId);\r\n        console.log(winLine);\r\n      }\r\n    }\r\n\r\n    jumpTo(step) {\r\n      this.setState({\r\n        stepNumber: step, \r\n        xIsNext: !((step%2) === 0), \r\n      })\r\n      if(!calculateWinner(this.state.history[step])) {\r\n        this.setState({\r\n          winBlockId: [null, null, null], \r\n        });\r\n      }\r\n    }\r\n\r\n    reverse(moves) {\r\n      console.log('reverse');\r\n      this.setState({\r\n        reverseList: !this.state.reverseList,\r\n      })\r\n    }\r\n\r\n    render() {\r\n      const history = this.state.history;\r\n      const current = history[this.state.stepNumber];\r\n      let winner = calculateWinner(current.squares);\r\n      if(!current.squares.includes(null) && !winner) {\r\n        winner = 'Tie!';\r\n      }\r\n\r\n      const moves = history.map((step, move) => {\r\n        const row = Math.floor(step.chosenIndex/3) + 1;\r\n        const col = step.chosenIndex%3 + 1;\r\n        let buttonJ = \r\n        <button onClick={()=>this.jumpTo(move)}>\r\n          {step===current ? \r\n            <strong>\r\n              {move ? \r\n                [`Go to move #${move}`, <br key={move}/>, `${move%2===0 ? 'X' : 'O'} (${row}, ${col})`]\r\n                : `Go to game start`}\r\n            </strong> \r\n            :move ?\r\n              [`Go to move #${move}`, <br key={move}/>, `${move%2===0 ? 'X' : 'O'} (${row}, ${col})`]\r\n              : `Go to game start`}\r\n        </button>;\r\n        return (\r\n          <li key={move}>\r\n            {buttonJ}\r\n          </li>\r\n        )\r\n      });\r\n      const movesReverse = moves.slice().map((val, idx)=>{\r\n        return moves[moves.length-1-idx];\r\n      });\r\n      \r\n      let status;\r\n      winner ? status = `Winner: ${winner}` : status = `Next player: ${this.state.xIsNext ? 'X' : 'O'}`;\r\n      \r\n      return (\r\n        <div className=\"game\">\r\n          <div className=\"game-board\">\r\n            <Board\r\n              winBlocks={this.state.winBlockId} \r\n              squares={current.squares} \r\n              onClick={(i) => this.handleClick(i)}\r\n            />\r\n          </div>\r\n          <div className=\"game-info\">\r\n            <div>{status}</div>\r\n            <button className='reverse' onClick={()=>this.reverse(moves)}>reverse list</button>\r\n            <ul>{this.state.reverseList ? movesReverse : moves}</ul>\r\n          </div>\r\n        </div>\r\n      );\r\n    }\r\n  }\r\n  \r\n  // ========================================\r\n  \r\n  ReactDOM.render(\r\n    <Game />,\r\n    document.getElementById('root')\r\n  );\r\n\r\n  function calculateWinner(squares) {\r\n    const lines = [\r\n      [0, 1, 2],\r\n      [3, 4, 5],\r\n      [6, 7, 8],\r\n      [0, 3, 6],\r\n      [1, 4, 7],\r\n      [2, 5, 8],\r\n      [0, 4, 8],\r\n      [2, 4, 6],\r\n    ];\r\n    for (let i = 0; i < lines.length; i++) {\r\n      const [a, b, c] = lines[i];\r\n      if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\r\n        winLine = lines[i].slice();\r\n        return squares[a];\r\n      }\r\n    }\r\n    winLine = [null, null, null];\r\n    return null;\r\n  }\r\n  "],"sourceRoot":""}